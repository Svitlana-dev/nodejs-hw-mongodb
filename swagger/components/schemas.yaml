Contact:
  type: object
  properties:
    id: { type: string, example: '66b6f7f4c8d3a0c0c7a9b111' }
    name: { type: string, example: 'John Doe' }
    phoneNumber: { type: string, example: '+380501112233' }
    email: { type: string, nullable: true, example: 'john@example.com' }
    isFavourite: { type: boolean, example: false }
    contactType: { type: string, enum: [work, home, personal], example: 'work' }
    photo:
      {
        type: string,
        nullable: true,
        example: 'https://res.cloudinary.com/demo/image/upload/abc.jpg',
      }
    createdAt:
      { type: string, format: date-time, example: '2025-08-16T09:41:01.450Z' }
    updatedAt:
      { type: string, format: date-time, example: '2025-08-16T09:41:01.450Z' }
  required: [id, name, phoneNumber, contactType, createdAt, updatedAt]

ContactsList:
  type: object
  properties:
    items:
      type: array
      items:
        $ref: '#/Contact'
    page: { type: integer, example: 1 }
    perPage: { type: integer, example: 10 }
    totalItems: { type: integer, example: 2 }
    totalPages: { type: integer, example: 1 }
    hasNextPage: { type: boolean, example: false }
    hasPreviousPage: { type: boolean, example: false }
  required:
    [items, page, perPage, totalItems, totalPages, hasNextPage, hasPreviousPage]

ResponseOk:
  type: object
  properties:
    status: { type: integer, example: 200 }
    message: { type: string, example: 'Success' }
    data: { type: object, nullable: true, additionalProperties: true }
  required: [status, message]

ResponseError:
  type: object
  properties:
    status: { type: integer, example: 400 }
    message: { type: string, example: 'Validation error' }
    data: { type: object, nullable: true, additionalProperties: true }
  required: [status, message]

ContactCreateFormData:
  type: object
  properties:
    name: { type: string }
    phoneNumber: { type: string }
    email: { type: string, format: email }
    isFavourite: { type: boolean }
    contactType: { type: string, enum: [work, home, personal] }
    photo: { type: string, format: binary }
  required: [name, phoneNumber]

ContactUpdateFormData:
  type: object
  properties:
    name: { type: string }
    phoneNumber: { type: string }
    email: { type: string, format: email }
    isFavourite: { type: boolean }
    contactType: { type: string, enum: [work, home, personal] }
    photo: { type: string, format: binary }
  minProperties: 1
